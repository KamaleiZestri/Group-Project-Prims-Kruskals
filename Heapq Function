from collections import defaultdict
import heapq
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

Input_File = 'input.txt'
Output_File = 'output.txt'
Graph_File = 'graph.txt'

### Graph Function

def graph(glist):
    
    file = open(Graph_File, 'w') ### Adding vertecis to graph file
    for i in range(len(glist)):
        text = glist[i][0]
        file.write(text)
        text = ' '
        file.write(text)
        text = glist[i][1]
        file.write(text)
        text = ' '
        file.write(text)
        text = '\n'
        file.write(text)
    file.close()

    gr = nx.read_edgelist(Graph_File, create_using=nx.Graph(), nodetype=str)

    print(nx.info(gr)) ### Graph
    nx.draw(gr)
    plt.show()  

### MST Function 

def mst(vertex, edges):    
    connections = defaultdict(list)
    for vertex1,vertex2,w in edges: ### Building vertex connections with dict
        connections[vertex1].append((w, vertex1, vertex2))
        connections[vertex2].append((w, vertex2, vertex1))
    tree = [] ### MST tree
    visited = set(vertex[0]) ### Setting Starting Vertex
    remedges = connections[vertex[0]][:] ### Connections of starting vertex
    heapq.heapify(remedges) ### Adding vertex connections to heapq
    while remedges:
        weight, vertex1, vertex2 = heapq.heappop(remedges)
        if vertex2 not in visited:
            visited.add(vertex2)
            tree.append((vertex1, vertex2, weight)) ###  Adding to tree from Heappop
            for i in connections[vertex2]:
                if i[2] not in visited:
                    heapq.heappush(remedges, i)
    return tree


### Construct Edge List
    
content = []
edges = []
content = np.loadtxt(Input_File, str)
for i in range(len(content)):
   temp = int(content[i][2])
   templist = []
   templist.append(content[i][0])
   templist.append(content[i][1])
   templist.append(temp)
   edges.append(templist)

### Construct Vertex List

vertex = [] ### Separating vertices
for i in range(len(edges)):
    if edges[i][0] not in vertex:
        vertex.append(edges[i][0])
    if edges[i][1] not in vertex:
        vertex.append(edges[i][1])

### Calculate MST Value

weight = 0
for i in range(len(mst(vertex, edges))):
    temp = mst(vertex, edges)[i][2]
    weight += temp

### Graph variables

beforeMST = edges
afterMST = mst(vertex, edges)

### Solution

print (" Initial vertecis are; \n", vertex, "\n Initial edges are; \n", 
       beforeMST, " \n MST weight is", weight, "\n MST is; \n", afterMST, 
       "\n Initial graph; \n")
graph(beforeMST)
print(" MST graph; \n")
graph(afterMST)

       
